/**
 * @fileoverview Firestore Security Rules for SkillFiesta application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and allows public read access with owner-only writes for saved stories.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user can modify their own profile.
 * - /saved_stories/{storyId}: Stores shared saved stories. Includes 'authorId' for authorization.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Anyone can read saved stories, but only the author can modify them.
 *
 * Denormalization for Authorization:
 * - The 'SavedStory' entity includes an 'authorId' field, enabling direct ownership checks without additional reads.
 */

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, ensuring only the user can access their own data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' attempts to create a profile with ID 'user123'.
     * @deny (get) User with ID 'user456' attempts to read profile with ID 'user123'.
     * @deny (update) User with ID 'user456' attempts to update profile with ID 'user123'.
     * @deny (delete) User with ID 'user456' attempts to delete profile with ID 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages saved stories, allowing public reads and owner-only writes.
     * @path /saved_stories/{storyId}
     * @allow (get) Any user can read a saved story.
     * @allow (list) Any user can list saved stories.
     * @allow (create) User with ID 'user123' can create a saved story with authorId 'user123'.
     * @allow (update) User with ID 'user123' can update a saved story if they are the author.
     * @allow (delete) User with ID 'user123' can delete a saved story if they are the author.
     * @deny (create) User with ID 'user456' attempts to create a saved story with authorId 'user123'.
     * @deny (update) User with ID 'user456' attempts to update a saved story authored by 'user123'.
     * @deny (delete) User with ID 'user456' attempts to delete a saved story authored by 'user123'.
     * @principle Allows public read access but restricts write access to the author.
     */
    match /saved_stories/{storyId} {
      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
          return isOwner(authorId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isOwner(request.resource.data.authorId);
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }
  }
}