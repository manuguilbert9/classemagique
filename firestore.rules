/**
 * @fileOverview Firestore Security Rules for SkillFiesta.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a public-read, owner-write model for saved stories.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Only the user can read/write their own profile.
 * - /saved_stories/{storyId}: Stores publicly accessible stories, but only the author can create, update, or delete them.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data. User listing is disallowed.
 * - Saved stories are publicly readable, but write access is restricted to the author.
 * - Data validation is minimized to facilitate rapid prototyping. Only authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 * - Saved stories denormalize the author's ID directly onto the document to avoid needing a `get()` call to the `users` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) - User with ID 'user123' can read/write their profile if authenticated as 'user123'.
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (update, delete) - User with ID 'user456' cannot modify/delete the profile of 'user123'.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      // Helper function to check if the request is from the owner
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the request is from an existing owner
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to saved story documents.
     * @path /saved_stories/{storyId}
     * @allow (get, list) - Any user (even unauthenticated) can read/list saved stories.
     * @allow (create) - Authenticated user 'user123' can create a story with authorId 'user123'.
     * @allow (update, delete) - Authenticated user 'user123' can modify/delete a story where they are the author.
     * @deny (create) - Unauthenticated user cannot create a story.
     * @deny (update, delete) - User 'user456' cannot modify/delete a story authored by 'user123'.
     * @principle Allows public read access but restricts write access to the author.
     */
    match /saved_stories/{storyId} {
      // Helper function to check if the request is from the author
      function isAuthor(authorId) {
        return request.auth != null && request.auth.uid == authorId;
      }

      // Helper function to check if the request is from an existing author
      function isExistingAuthor(authorId) {
        return isAuthor(authorId) && resource != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingAuthor(resource.data.authorId);
      allow delete: if isExistingAuthor(resource.data.authorId);
    }
  }
}